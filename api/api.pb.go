// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Request for a certificate to be issued
type CertificateRequest struct {
	// Example: foo.bar.com
	DnsName              string   `protobuf:"bytes,1,opt,name=dnsName,proto3" json:"dnsName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateRequest) Reset()         { *m = CertificateRequest{} }
func (m *CertificateRequest) String() string { return proto.CompactTextString(m) }
func (*CertificateRequest) ProtoMessage()    {}
func (*CertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *CertificateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateRequest.Unmarshal(m, b)
}
func (m *CertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateRequest.Marshal(b, m, deterministic)
}
func (m *CertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateRequest.Merge(m, src)
}
func (m *CertificateRequest) XXX_Size() int {
	return xxx_messageInfo_CertificateRequest.Size(m)
}
func (m *CertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateRequest proto.InternalMessageInfo

func (m *CertificateRequest) GetDnsName() string {
	if m != nil {
		return m.DnsName
	}
	return ""
}

// A successful response containing a issued certificate
type CertificateResponse struct {
	// A blob containing the raw cert
	CertificatePayload   []byte   `protobuf:"bytes,1,opt,name=certificatePayload,proto3" json:"certificatePayload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateResponse) Reset()         { *m = CertificateResponse{} }
func (m *CertificateResponse) String() string { return proto.CompactTextString(m) }
func (*CertificateResponse) ProtoMessage()    {}
func (*CertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *CertificateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateResponse.Unmarshal(m, b)
}
func (m *CertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateResponse.Marshal(b, m, deterministic)
}
func (m *CertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateResponse.Merge(m, src)
}
func (m *CertificateResponse) XXX_Size() int {
	return xxx_messageInfo_CertificateResponse.Size(m)
}
func (m *CertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateResponse proto.InternalMessageInfo

func (m *CertificateResponse) GetCertificatePayload() []byte {
	if m != nil {
		return m.CertificatePayload
	}
	return nil
}

func init() {
	proto.RegisterType((*CertificateRequest)(nil), "api.CertificateRequest")
	proto.RegisterType((*CertificateResponse)(nil), "api.CertificateResponse")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 155 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54, 0xd2, 0xe3, 0x12, 0x72, 0x4e,
	0x2d, 0x2a, 0xc9, 0x4c, 0xcb, 0x4c, 0x4e, 0x2c, 0x49, 0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e,
	0x11, 0x92, 0xe0, 0x62, 0x4f, 0xc9, 0x2b, 0xf6, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4,
	0xe0, 0x0c, 0x82, 0x71, 0x95, 0x5c, 0xb9, 0x84, 0x51, 0xd4, 0x17, 0x17, 0xe4, 0xe7, 0x15, 0xa7,
	0x0a, 0xe9, 0x71, 0x09, 0x25, 0x23, 0x84, 0x03, 0x12, 0x2b, 0x73, 0xf2, 0x13, 0x53, 0xc0, 0x7a,
	0x79, 0x82, 0xb0, 0xc8, 0x18, 0x85, 0x72, 0x09, 0x22, 0x19, 0xe3, 0x59, 0x5c, 0x5c, 0x9a, 0x5a,
	0x24, 0xe4, 0xc0, 0xc5, 0x09, 0x66, 0x81, 0x64, 0x84, 0xc4, 0xf5, 0x40, 0x2e, 0xc5, 0x74, 0x9b,
	0x94, 0x04, 0xa6, 0x04, 0xc4, 0x11, 0x4a, 0x0c, 0x49, 0x6c, 0x60, 0x9f, 0x19, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x46, 0x28, 0x08, 0x90, 0xe6, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CertificateIssuerClient is the client API for CertificateIssuer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CertificateIssuerClient interface {
	IssueCert(ctx context.Context, in *CertificateRequest, opts ...grpc.CallOption) (*CertificateResponse, error)
}

type certificateIssuerClient struct {
	cc *grpc.ClientConn
}

func NewCertificateIssuerClient(cc *grpc.ClientConn) CertificateIssuerClient {
	return &certificateIssuerClient{cc}
}

func (c *certificateIssuerClient) IssueCert(ctx context.Context, in *CertificateRequest, opts ...grpc.CallOption) (*CertificateResponse, error) {
	out := new(CertificateResponse)
	err := c.cc.Invoke(ctx, "/api.CertificateIssuer/IssueCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertificateIssuerServer is the server API for CertificateIssuer service.
type CertificateIssuerServer interface {
	IssueCert(context.Context, *CertificateRequest) (*CertificateResponse, error)
}

func RegisterCertificateIssuerServer(s *grpc.Server, srv CertificateIssuerServer) {
	s.RegisterService(&_CertificateIssuer_serviceDesc, srv)
}

func _CertificateIssuer_IssueCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateIssuerServer).IssueCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CertificateIssuer/IssueCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateIssuerServer).IssueCert(ctx, req.(*CertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CertificateIssuer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.CertificateIssuer",
	HandlerType: (*CertificateIssuerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IssueCert",
			Handler:    _CertificateIssuer_IssueCert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
